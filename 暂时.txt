
架构：
参考方案，

在服务框架方面我们分别采用了Rest.li和Thrift，根据不同的应用场景灵活选用，
并通过ZooKeeper实现了服务的配置管理和集群管理。 和大部分互联网企业一样，
我们在实际业务中大量使用了Redis做持久化的存储和数据缓存，
通过Haproxy和LVS结合Keepalived实现关键系统的软件负载均衡。

消息服务方面我们分别使用了RabbitMQ和Appolo，用于实现订单和行情数据的发布管理，
通过Node.js和QuickFix这两个开源项目我们实现了实时的行情推送，并为用户提供了可靠的交易API服务。

数据库层面我们使用MongoDB承担了全部行情数据的存储和分发，通过MySQL、InnoDB实现了业务数据的存储。

------------------

Twitter的Redis/Memcached代理服务：Twemproxy；---开源，网上有；
Facebook的Memcached协议路由器：McRouter---开源，网上有；
Youtube的Mysql中间件：Vitess


数据库：
mysql+redis,memcached+hbase;


看下docter;

