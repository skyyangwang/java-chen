优秀程序员的特征和品质

    优秀程序员是指能够独立、快速、高质量地完成代码的程序员。这些程序员是公司最可宝贵的财富，是公司的真正栋梁，那么优秀的程序员通常具有哪些特征和品质呢？


1.      勤劳：勤劳是优秀程序员的最明显特征。因为，只有大量的代码开发和程序经验才可能熔铸出一位优秀的程序员。当他们经过了海量代码和巨大的程序压力之后，勤劳已经成为优秀程序员本

	身的一部分，也许解构优秀程序员的本质，其中最共通的特点之一就是勤劳。不勤劳者不入此门。


2.      规矩：最优秀的程序员往往是做事情最规矩的程序员。他们技术采用真正的纯OO技术，设计程序结构采用标准的设计模式，定义包结构用国际标准的包结构。代码的风格采用通用语法风格。

	就连算法也采用业界通用和标准的算法。他们是标准的最强有力拥护者和执行者。他们的程序也因此具有自然的强标准性、开放性和稳定性。


3.      清楚：高手的风范是清楚、简练和有序。通常程序上的高手都是软件工程的高手。他们不但深刻理解要写程序，还对为什么要写程序和需要写什么样的程序有更深的理解。只有这样，他们对

	程序和开发中的活动才有超过常人的理解力。才能在开发中体现出超人的灵性。同时，高手表现在有序，他们能够在如山的任务前谈笑风生，应付自如。他们的动作不是最多的，但他们没有

	一个多余的动作，他们做事的顺序让人看过之后觉得合情、合理和能够接受。正所谓“含而不发，发则必中”。


4.      工具：最优秀的程序员是一些了解和善于使用大量工具的人员。他们不但擅长开发工具，而且善长于使用配置工具、测试工具、性能调优工具、监控工具、Bug工具、建模工具等大量工具。这

	些工具才是高手们的真正利器，他们利用工具发现问题，迅速处理，提高效率。工具才使他们显的更加出色、优秀和高效。


5.      质量：高手总是无懈可击的，因此，真正的高手总是最关心自己写出代码的质量。他们写出的东西，可能不是最快的，但一定是最好的。什么是好？简而言之，思路清晰，程序稳定。不要期望

	轻易找到高手的Bug，即使找到，你也会发现，他们早已自己发现并改掉了。“高手给你看到的永远是身前，而不是身后！”

	在程序的道路上走，语法熟练才是孩儿初立。要想真正成为高手，知识常在程序之外。如果以上几样都做到了，又何止是一个做程序的高手呢？我想应该成为做任何事情的高手了吧？这也就是

	老子说的“大道相像”了。

Perl的格言：做一种事不止有一种方法。

Perl程序员的三种品质：懒惰、急躁和傲慢（Laziness,Impatience and hubris）

懒惰：
    是这样一种品质，它使得你花大力气去避免消耗过多的精力。它敦促你写出节省体力的程序，同时别人也能利用它们。为此你会写出完善的文档，以免别人问你太多问题。

急躁：
    是这样一种愤怒――当你发现计算机懒洋洋地不给出结果。于是你写出更优秀的代码，能尽快真正的解决问题。至少看上去是这样。

傲慢：
    极度的自信，使你有信心写出（或维护）别人挑不出毛病的程序。

　作一个真正合格的程序员，应该具有的素质。
 
　　1：团队精神和协作能力 

　　团队精神和协作能力是作为一个程序员应具备的最基本的素质。软件工程已经提了将近三十年了，当今的软件开发已经不是编程了，而是工程。独行侠可以写一些程序也能赚钱发财，但是进入研发

	团队，从事商业化和产品化的开发任务，就必须具备这种素质。可以毫不夸张的说这种素质是一个程序员乃至一个团队的安身立命之本。
 
　　2：文档习惯 

　　文档是一个软件系统的生命力。一个公司的产品再好、技术含量再高，如果没有缺乏文档，知识就没有继承，公司还是一个来料加工的软件作坊。作为代码程序员，必须将30％的工作时间写用于技

    术文档。没有文档的程序员势必会被淘汰。 

　　3：规范化的代码编写习惯
 
　　知名软件公司的代码的变量命名、注释格式，甚至嵌套中行缩进的长度和函数间的空行数字都有明确规定，良好的编写习惯，不但有助于代码的移植和纠错，也有助于不同技术人员之间的协作。 
    
    一些所谓的高手甚至叫嚣高手写的代码一般人看不懂，我只能说他不是一名合格的程序员。 

　　4：需求理解能力 

　　程序员要能正确理解任务单中描述的需求。在这里要明确一点，程序员不仅仅要注意到软件的功能需求，还应注意软件的性能需求，要能正确评估自己的模块对整个项目中的影响及潜在的威胁，

    如果有着两到三年项目经验的熟练程序员对这一点没有体会的话，只能说明他或许是认真工作过，但是没有用心工作。 

　　5：模块化思维能力 

　　作为一个优秀的程序员，他的思想不能在局限当前的工作任务里面，要想想看自己写的模块是否可以脱离当前系统存在，通过简单的封装在其他系统中或其他模块中直接使用。这样做可以使代码能

    重复利用，减少重复的劳动，也能是系统结构越趋合理。模块化思维能力的提高是一个程序员的技术水平提高的一项重要指标。 

　　6：测试习惯 

　　测试是软件工程质量保证的重要环节，但是测试不仅仅是测试工程师的工作，而是每个程序员的一种基本职责。程序员要认识测试不仅是正常的程序调试，而要是要进行有目的有针对性的异常调用

    测试，这一点要结合需求理解能力。
 
　　7：学习和总结的能力 

　　程序员是很容易被淘汰的职业，所以要善于学习总结。许多程序员喜欢盲目追求一些编码的小技巧，这样的技术人员无论学了多少语言，代码写起来多熟练，我们只能说他是一名熟练的代码民工，

    他永远都不会有质的提高。一个善于学习的程序员会经常总结自己的技术水平，对自己的技术层面要有良好的定位，这样才能有目的地提高自己。这样才能逐步提高，从程序员升级为软件设计师、

    系统分析员。
 
　　作为高级程序员，乃至于设计师而言，除了应该具备上述全部素质之外，还需要具备以下素质：
 
　　1、 需求分析能力
 
　　2、 整体框架能力 

　　3、 流程处理能力 

　　4、 模块分解能力 

　　5、 整体项目评估能力 

　　6、 团队组织管理能力 

　　1，激情

　　我曾经遇到许多“职业程序员”，他们从事IT是因为觉得这是一种职业，他们只在工作时间编程，除非送去培训否则他们不会学习新东西，这不是好的程序员。我认为一个好的程序员总是对编程

    充满激情，而且好的开发者会做一些编程工作即使这没有报酬。激情是一个优秀程序员的重要指标。

　　2，自学好学

　　编程领域始终发展变化着，不出一年有些新技术就变成了老技术，这并不是说好的程序员要对所有新技术跟进，但有些却对学习任何新技术都没有兴趣。他们通常在学校学习了编程，然后工作后

    单位安排学什么就学什么。如果在招聘中你听到“让我培训一个星期我就会胜任这个工作”那不要雇佣他。实际上，真正优秀的程序员始终谈论着你所不知道的新技术，向人们解释为什么你必须

    用这个技术，哪怕没有听众听得明白，哪怕他自己也不明白。

　　3，聪明

　　聪明包括很多因素，情绪和社会交际只是其中之一。好的程序员绝不木讷，他们是最聪明的人，他们中的许多善于交际，健谈、兴趣广泛。

　　4，隐性的经验

　　―好的程序员通常有自己的私人的一些研究、爱好、项目，而这些是他们不写在简历上 (通常觉得不值得写)，但表现出来却可能恰恰是他的潜能、深度和后劲所在。

　　5，技术多样性

　　由于好的程序员喜欢学习和涉猎新技术，所以一般来说超过22岁的都熟知很多新技术，而且对多种技术的长短有 “强烈”的个人意见/见解，喜好尝试新鲜技术。

　　6，资格证书

　　资格证书并不是识别真正程序员的方法，MCSE、SCJP说明不了什么，它们只是让别人认识和获取的，顶多代表这个人在某个技术有一定的知识。

　　原文作者在文末写道：以上所说的标准并不是绝对的，因为有些优秀的程序员确实不符合上述，而有些bad程序员却符合了。但相信这些对大多数真正的程序员都适用。

　　总结而言，优秀的程序员通常有一下特点：

　　对技术充满激情

　　将编程作为一种爱好

　　如果你允许会滔滔不绝地跟你谈论技术

　　有过个人的开发经历（与4意思相同）

　　坚持认为某种技术最好

　　如果让他用他认为不好的技术他会非常别扭

　　聪明、健谈、兴趣广泛

程序员每天该做的事

1、总结自己一天任务的完成情况

	最好的方式是写工作日志，把自己今天完成了什么事情，遇见了什么问题都记录下来，日后翻看好处多多

2、考虑自己明天应该做的主要工作

	把明天要做的事情列出来，并按照优先级排列，第二天应该把自己效率最高的时间分配给最重要的工作

3、考虑自己一天工作中失误的地方，并想出避免下一次再犯的方法

	出错不要紧，最重要的是不要重复犯相同的错误，那是愚蠢

4、考虑自己一天工作完成的质量和效率能否还能提高

	一天只提高1%，365天你的效率就能提高多少倍你知道吗？ (1+0.01)^365 = 37 倍

5、看一个有用的新闻网站或读一张有用的报纸，了解业界动态

	闭门造车是不行的，了解一下别人都在做什么，对自己能带来很多启示

6、记住一位同事的名字及其特点

	你认识公司的所有同事吗？你了解他们吗？

7、清理自己的代码

	今天完成的代码，把中间的调试信息，测试代码清理掉，按照编码风格整理好，注释都写好了吗？

8、清理自己的桌面

	当日事当日毕，保持清洁干劲的桌面才能让你工作时不分心，程序员特别要把电脑的桌面清理干净


程序员每周该做的事

1、向你的老板汇报一次工作

	让你的老板知道你在做什么，这很重要。可以口头、书面、邮件，看你老板的工作方式而定

2、进行一次自我总结（非正式）

	这周之内自己表现得怎么样？该加分还是扣分？

3、制定下周计划

	把下周要做的事情列出来，一样要分清楚优先级

4、整理自己的文件夹、书柜和电脑文件

	把桌面以外的地方也要清理干净，电脑的文件夹，收到的邮件，把过时的垃圾全部清理掉

5、与一个非公司的朋友沟通

	它山之石，可以攻玉

6、看一本杂志

	找一本适合自己的专业杂志

7、纠正自己或同事一个细节上的不正确做法

	《细节决定成败》看过了吗？没看过强烈建议先看看


程序员每月该做的事

1、至少和一个同事一起吃饭或喝茶

	不光了解自己工作伙伴的工作，还要了解他们的生活

2、自我考核一次

	相对正式地考核自己一下，你对得起这个月的工资吗？

3、对你的同事考核一次

	你的同事表现怎么样？哪些人值得学习，哪些人需要帮助？

3、制定下月的计划，确定下月的工作重点

4、总结自己工作质量改进状况

	自己的质量提高了多少？

5、有针对性地对一项工作指标做深入地分析并得出改进的方案

	可以是对自己的，也可以是对公司的，一定要深入地分析后拿出自己的观点来。要想在老板面前说得上话，做的成事，工作上功夫要做足。

6、与老板沟通一次

	最好是面对面地沟通，好好表现一下自己，虚心听取老板的意见，更重要的是要了解老板当前关心的重点

程序员每年该做的事

1、年终总结

	每个公司都会做的事情，但你真正认真地总结过自己吗？

2、兑现给自己、给家人的承诺

	给老婆、儿子的新年礼物买了没有？给自己的呢？

3、下年度工作规划

	好好想想自己明年的发展目标，争取升职/加薪、跳槽还是自己出来干？

4、掌握一项新技术

	至少是一项，作为程序员一年要是一项新技术都学不到手，那就一定会被淘汰。

	掌握可不是看本书就行的，要真正懂得应用，最好你能够写一篇教程发表到你的blog

5、推出一种新产品

	可以是一个真正的产品，也可以只是一个类库，只要是你创造的东西就行，让别人使用它，也为世界作点贡献。当然如果真的很有价值，收点注册费也是应该的

6、与父母团聚一次

	常回家看看，常回家看看  

如果做一个专业的程序员: 

1.基础语言知识 :从底层的ASM 到结构化的C,到面向对象的C++ JAVA,如果不能都精通,但是要了解,至少要精通一门

2.基础数学知识: 高等数学(数学分析) 线性代数 离散数学,概率.数理统计等等

3.基础计算机原理:操作系统原理,微机原理,编译原理 数据库原来等等

4.看你感兴趣的学习一个方向:图形学...windows应用程序开发...Linux程序开发,数据库方面 网络编程,等等

　　信息技术的更新速度是惊人的，程序员的职业生涯则是一个要求不断学习的过程，如何才能成为一名合格的程序员，一名合格的程序员需要掌握哪些技能呢？

　熟练掌握开发工具


　　做为一名程序员至少熟练掌握两到三种开发工具的使用，这是程序员的立身之本，其中C/C++和JAVA是重点推荐的开发工具，C/C++以其高效率和高度的灵活性成为开发工具中的利器，很多系统级

    的软件还是用C/C编写。而JAVA的跨平台和与WEB很好的结合是JAVA的优势所在，而JAVA即其相关的技术集JAVA One很可能会成为未来的主流开发工具之一。其次，能掌握一种简便的可视化开发工

    具，如VB，PowerBuilder，Delphi，C Builder，则更好，这些开发工具减小了开发难度，并能够强化程序员对象模型的概念。另外，需要掌握基本的脚本语言，如shell，perl等，至少能读懂这

    些脚本代码。


　熟知数据库

　　为什么数据库是如此重要？作为程序员，他们自然有自己的理由：很多应用程序都是以数据库的数据为中心，而数据库的产品也有不少，其中关系型数据库仍是主流形式，所以程序员至少熟练掌

    握一两种数据库，对关系型数据库的关键元素要非常清楚，要熟练掌握SQL的基本语法。虽然很多数据库产品提供了可视化的数据库管理工具，但SQL是基础，是通用的数据库操作方法。如果没有

    机会接触商业数据库系统，可以使用免费的数据库产品是一个不错的选择，如mySQL， Postgres等。

　对操作系统有一定的了解


　　当前主流的操作系统是Windows，Linux/Unix，熟练地使用这些操作系统是必须的，但只有这些还远远不够。要想成为一个真正的编程高手，需要深入了解操作系统，了解它的内存管理机制、进

    程/线程调度、信号、内核对象、系统调用、协议栈实现等。Linux作为开发源码的操作系统，是一个很好的学习平台，Linux几乎具备了所有现代操作系统的特征。虽然Windows系统的内核实现机

    制的资料较少，但通过互联网还是能获取不少资料。只有对操作系统有一定的了解后，你会发现自己上了一个新的台阶。

　懂得网络协议TCP/IP

　　在互联网如此普及的今天，如果您还没有对互联网的支撑协议TCP/IP协议栈有很好的掌握，就需要迅速补上这一课，网络技术已改变了软件运行的模式，从最早的客户/服务器结构，到今天的

    WEB Services，再到未来的网格计算，这一切都离不开以TCP/IP协议栈为基础的网络协议支持，所以，深入掌握TCP/IP协议是非常必要的。至少，你需要了解ISO七层协议模型，IP/UDP/TCP/HTTP

    等常用协议的原理和三次握手机制。

　明白DCOM/CORBA/XML/WEB Services存在的意义

　　随着技术的发展，软件与网络的无缝结合是必然趋势，软件系统的位置无关性是未来计算模式的重要特征之一，DCOM/CORBA是当前两大主流的分布计算的中间平台，DCOM是微软COM(组件对象模型)

    的扩展，而CORBA是OMG支持的规范。程序员需要做的不仅仅是利用商业的开发平台来开发软件，而是要理解这些技术的初衷，即为什么需要这项技术，如果你能理解了这一点，再回头看这些技术

    的具体实现，就如庖丁解牛，迎刃而解。XML/WebServices重要性不言而喻，XML以其结构化的表示方法和超强的表达能力被喻为互联网上的“世界语”，是分布计算的基石之一。

　不要将软件工程与CMM分开

　　现代大型软件系统的开发中，工程化的开发控制取代个人英雄主义，成为软件系统成功的保证，一个编程高手并不一定是一个优秀的程序员，一个优秀的程序员是将出色的编程能力和开发技巧同

    严格的软件工程思想有机结合，编程只是软件生命周期中的其中一环，优秀的程序员应该掌握软件开发各个阶段的基本技能，如市场分析，可行性分析，需求分析，结构设计，详细设计，软件测

    试等。一句话可以概括我的看法：“创意无限，流程保证”。

　拥有强烈的好奇心

　　什么才是一个程序员的终极武器呢，那就是强烈的好奇心和学习精神。没有比强烈的好奇心和学习精神更好的武器了，它是程序员们永攀高峰的源泉和动力所在。

　　如果您正为如何成为一名合格的程序员而发愁的话，希望以上文字能为您排除一些顾虑和问题。如果您想获得更多有关程序员的信息，那么请随时关注天天招生网，我们将在最短的时间内提供最

    真实，最准确的相关信息。

　确定目标

    做什么事都要有明确的目标，因此，你首先要为自己确定一个可测量的目标，并把这个大目标分解为几个分阶段的小目标。比如，要在一年内开发出一套仓库管理软件：第一月的目标是学会一种

    计算机语言；第二个月的目标是熟悉仓库管理业务；第三个月学会数据库；第四个月写出原型……然后按计划去做，每完成一步你的信心就会增加一些，并会感受到成功的快乐。

　选择工具

    当你开始着手的时候，会发现市面上有太多的计算机语言和工具供你选择了。具体选择某种语言和环境与你的目标直接相关，比如要开发单片机系统和要开发管理系统，所选择的语言会有天壤之

    别。下面是一些参考意见(纯属个人意见)：

1、脚本类：特点是简单、易学、易用。比较常用的有：Unix/ Linux的Shell语言，网页里用的VBScript/JavaScript，MS-Office里用的VBA，动态主页用的JSP、ASP、PHP等，通用语言Perl、Python等。当然像Python/Perl语言的功能已非常强大，有用它们写出的数据库、系统管理等大型系统，如Zope、WebMin等。

2、RAD类：这类以快速开发著称的语言及工具比较流行，常用的有VB、Delphi、Powerbuilder、Visual FoxPro等，这类工具常用来开发管理信息系统，如用友、金碟等，也用来开发通用软件。

3、专业类：最常用的是C/C++，Java等，如果你想成为专业的程序员，就要学习这些内容。它们通常用来开发系统级程序，比如操作系统(MS-Windows、Unix/Linux等)、数据库(Oracle、SQL-Server等)

   、开发语言(C/C++、Python等)、工具软件(WPS、KV3000等)，在大型系统里基本都有它们的身影。

4、专用类：这类语言种类最多，它们一般设计用来完成一项特殊的工作。例如现在最流行的Flash，它内含Action Script语言；AutoCAD内带VBA和AutoLisp；每一种单片机都带有自己的ASM语言；许多

   系统如MatLab、Spss、Intouch、Modsoft等都有自己的专用语言。

总的来说，当选择语言的时候，一定要与自己的目标相结合，另外，入门的时候，可先选择容易一些的，入门后，再选择专业些的。一开始就选择C++可能会让你知难而退，但如果选用Python，你就可

能会觉得计算机语言原来也挺容易。

　　勤奋练习

除了多写程序，没有别的办法去更快地提高你的程序水平了。看书的时候，最好把书上的例子自己输进电脑实践一遍，然后进行各种试验，再联想出各种相关的程序，自己写出来，并验证自己的结果。

如果有好的想法，就尝试把它写出来，很快你会发现你的水平在快速上升。

当你有了一定的基础的时候，可以尝试去读高手写的程序，解读他们的程序的设计理念、风格、解决问题的思路等。在这方面，GNU/Linux为我们提供了一个巨大的源程序宝库，里面有各种各样的程序

源代码，详细研究一套你感兴趣的系统，你的水平会得到大幅度提高。

　　不断提高

除了多加练习，你还需要多读书，特别是英文书。读书可以在理论上提高你的水平。信息技术发展太快，而大部分的技术最先出现的时候都是英文版本的，要几个月以后才有中文版本的书出来，因此

要想跟上步伐，一定要努力提高自己的英文水平，这样才能同步跟上信息技术。你可能担心自己的英语水平不行，没关系，刚开始多查字典，很多就会发现计算机英语其实很容易。当然，这里的书是

泛指，包括网络上的各种文章，电子书等。

另外，多与他人交流经验也有助于自己水平的提高。互联网为我们提供了一个巨大的交流平台，各种BBS和新闻组上都有热心的高手回答你的问题。不过在问问题之前，自己一定要先努力尝试过，再给

出自己的想法。动不动就问别人，自己水平得不到提高，别人也不再会回答你的问题。

　　继续深造

当你觉得自己成了程序员的时候，你就会发觉还有很多东西要学，你可以继续深入学习来提升你的水平。

1、向下深入：了解操作系统的机制，了解底层的API，这对开发系统级程序非常有用。

2、向上延伸：学习项目管理，软件工程，设计模式，分析设计等，这对你开发大型系统非常有帮助，特别是一个团队去开发一个大型项目的时候。

3、横向扩展：熟悉各种系统如数据库、多媒体、人工智能等，然后集成起来应用，会产生更大的效果。

使用一种特殊的编程语言、编程很牛，单单靠这个并不能说一名程序员/开发者就是优秀程序员/开发者。   快速发展的开发环境使得这个行业比我今天看到的任何一个行业都要发展迅速，这既有积

极的一面也有消极的一面：今天的程序员/开发者有很多编程语言、开发工具和开发平台可选，但是建立一个安全、可扩展的环境却变得难了很多；硬件和软件正日新月异地变得更加复杂，但现在学

习新技术比过去要难太多了。

    以下是优秀程序员应当具备的品质：

语言和工具（Languages and Tools:）

    任何程序员/开发者需要具备的第一个技能就是，能够用编程语言工作并会使用与之相关的主要开发工具，包括：工具、IDEs, web 框架, messaging APIs。

程序设计方法（Programming Paradigm:）

	举例来说，很好地理解面向对象，这对使用强制式语言(Imperative Language也称过程式语言)写出可维护的代码至关重要。在企业开发中你会遇到各种不同的问题，理解多种程序设计方法并

	知道何时使用，将使这些问题迎刃而解。

领域专长的知识（Domain Specific Knowledge:）

	如果想编写系统来解决特定领域内的问题，那么拥有该领域的专长知识将非常重要。

	尽管许多这样的知识是由项目的商业分析员（Business Analyst）来获悉，但如果开发者也能获取，那么跟用户的交流将会更加容易，而且更能够理解他们的专业词汇。

人际关系（People Skills：）

	软件开发中最重要的技能之一就是能够与其他开发者一起高效工作――同事、质量/商业分析员（Quality/Business Analysts），客户，用户，很多很多……如果你能够很好地处理这些关系，

	那么成功的大路也离你不远矣。

解决问题（Problem Solving：）

	有能力解决那些没有明显解决方法的问题，这一点在软件开发中很重要。当把你的应用配置到JBoss或者通过一个测试找到一个棘手bug的时候，理智地编程将成为调试一个类路径(class path)

	问题。

沟通能力（Good Communication skills：）
	在软件世界中，人们通常认为好的沟通能力就是流利地说话，事实上这远不是。这指的是：你能够多么有效地与其他人交流。作为一名优秀的开发者，你应当能够很好地表达你的想法，很好地

	听，以及很好地掌控你与他人沟通的过程。

读书（Read Books：）

	读大量书将了解很多不同的技术，读书使你对一种技术有了快速、直接的视角。通常你应当选择知名学者的书，他们推崇实践和用技术解决问题的多种方法。在这个过程中，你将学到很多并逐

	渐形成自己的方法。没准哪天你也就能出书了呢。

实践、实践再实践（Practice, Practice and Practice）

	许多开发者拥有大量理论知识，他们饱览书籍和技术资料。然而，怎样运用这些知识却让他们望而却步。这是因为他们缺乏实践。你工作的效率和效力只能通过你实践中编写代码来获得。唯一

	能使你成为优秀开发者的方法就是实践、实践再实践。

遵循范例和最好的实践（Follow Patterns and Best Practices :）

	范例和实践反映了技术指导、常见技术问题和基于真实事件的实践。学习的过程是循序渐进的，但是一劳永逸。这会节省你非常多的时间和精力，让你的工作更加有效。遵循一本“代码编程指

	南”（Code Design Guideline），经常使用代码分析工具将检测和分析你的代码。

讨论/小组沟通（Discussion/Newsgroup:）

	参加开发社区会提高你的领导能力以及贡献感，二者都是成功的必需品。在社区内参加一场含量较高的技术讨论将使你充满成就感，而且会增长你的知识，因为其中的智者会查看和评点你的解

	决方法，你也会查看和评点他们的。而且这个过程教会你接纳并感激别人的建议。如果她/他做出了积极的贡献，不要忘了赞扬和鼓励（'pat someone on the back'）。

网络和数据库知识（Knowledge of Networking and Databases:）

	有人也许不赞成这点，但是一个优秀的开发者应当知道网络和数据库的基本东西。而且在思考解决方法的时候，不要忘记将二者考虑在内。拥有二者的知识，能够帮你写出更好的代码并节省

	你很多时间。

博客、写文章（Blog/ Write Articles:）

	我们中有谁能够记住每件事？我不能，所以我把他们记下来。当我需要的时候，可以回头翻阅参考。除此之外，我可以借此从读者那里获得反馈，让我对同样的问题收获更多的方法。我已经获

	悉了许多与我工作有关的反馈，虽然有好有坏，但我会一一验证，这个过程也让我受益匪浅。

KISS

	不要想歪了，这里的KISS不是你想的那样，是指让应用/方法直短、简单（Keep Implementations/Approaches Short and Simple的简写）。不要使用行话来让事情更加复杂，因为人们很难理

	解它们。最好的方法是简化你的设计并避免过度设计（over-engineering）的东西。

像测试者一样思考（Think as a Tester:）

	开发者和测试者，来自两个不同阵营的两类人群，随时准备同彼此较量。我发现二者的合作将产生非常好的结果。既不会损害开发者的利益也不会损害测试者的利益。实际上，长期来看，像测

	试者一样思考有利于减少你代码的bug，而且会形成很好的编程习惯和思维。

坚持一致是游戏规则（Consistency is the name of the game:）

	你是否经常跳槽或者被你的薪水所打击？如果是，那么静坐下来放松下并重新规划。好好想想不要让你的决定天马行空，为了不断向前，你需要一个坚实的决定并坚持不懈。

参加技术研讨会/大事件（Attend technology seminars and events:）

	如果你所在的城市有技术研讨会，一定要抽出时间参加。大部分的研讨会是免费的，而且会提供新技术的重要信息。

万家通吃还是一门独大？（Jack of all or Master of One?:）
	
	嗯……这个问题不好回答。在现在的环境下，你必须掌握一种以上的技术。尽管这不容易，但是好的开发者还是能够做到。其中的关键就在于适应性：如果你精于某种技术，那么给以机会你将

	较容易地在短期内掌握一种新技术。你不妨试试，多掌握一种技术可以让你在使用中对比、选择。

停止抱怨（Stop complaining：）

	是否软件没有做成，是否测试人员给你检查出一堆bug？许多开发者的本能反应是抵制情绪进而非常抵制这种情况。由于这种情绪是自然反应未经控制，所以它不可取。静心分析为什么软件失

	败、为什么有如此多bug，这是一个学习的经历将使你未来的工作受益良多。

 	最后，请记住你不是要永远做个程序员。所以一旦你自我满足并觉得自己是个优秀的程序员，你就得重新规划你自己（re-program yourself）。扩展你的兴趣。开发只是这个过程的一部分，

	了解用户和商业实际上是一种艺术，每个人应当以此为目标并努力掌握它。

1、养成良好的书写代码的习惯，该加注释的时候一定要加注释，该大写的地方一定要大写，变量命名不能模糊不清。这是基础，是为了让别人能看明白你所写的代码，不能你写的代码只有你自己才看
   
   的明白。

2、注意所写软件的版本控制。

3、勤奋学习最新的技术，计算机技术日新月异，这点我不说相信你也知道。

4、养成写开发文档的好习惯，再接到一个项目时，第一件事情是进行需求分析，然后写开发文档，把你每一步要做什么都先写清楚，再动手做。

5、不要怕技术难题，在计算机领域，只有不能解决难题的人，没有人解决不了的难题。

6、虚心象他人学习，即使技术实力比你差很多的人，也肯定会知道一些你所不知道的技术点。

* 比较宽的知识面，并且能够时时补充自己的知识和完善自己的知识结构 

* 耐心好，特别是在调试和学习阶段，世界上没有聪明的人只有刻苦的人。做开发其实就两件事情学习和改错，在这两件事情中间的开发过程其实是比较简单的 

* 永远记住：代码是给人看的而不是给机器运行的，计算机在执行程序时是不怕累的，而人在看代码时是非常累的 

* 良好的编码习惯，至少保证自己能够随时看懂几个月前自己所写的代码 

* 尽量让你的代码能够很容易的被别人理解，写代码时想想你会不会在两个月后被别人骂 

* 不要容忍自己犯重复的错误和写重复的代码 

* 知道如何做比得到代码更重要 

* 尽量不要做已经有很多人已经做过的事情 

* 学会尊重别人的开发成果，除非不得已不要下决定全面替换以前的系统 

* 珍惜自己的时间与工作成果，尽量让别人分享自己的开发成果

* 避免假设，多思考极端情况与引起错误的可能性，努力减少低级错误

* 不要相信至少是不要轻信自己为自己所做的测试结果 

* 懂得坚持自己的开发思路，并懂得理解与吸收别人的思想 

* 学会与其他人保持一致，但不能放弃自己的开发特色 

* 懂得向你周围的人学习，不论是开发能力上的还是开发经验上的 

* 懂得软件结构的的重要性，分析代码前先分析代码的结构 

* 学会总结，定期总结自己所学会的知识，看看自己前段时间因为各种原因所浪费的时间 

* 学会计划，尽量不要认为通过延长自己的工作时间来完成任务 

* 学会正确估计自己的能力和工作时间 

* 多看些杂志，没事情的时候可以看看以前看过的参考书，书中很可能有你以前没有注意到的一些细节

* 不要太早去做一些与开发无关的事情，因为学习的黄金时期是很短暂的 

* 学会分析别人的系统，多看看别人所开发的系统的先进的一面。这里包括别人的开发思路，实现时所采用的结构 

* 时常感到自己将被淘汰，经常埋怨自己的不努力

* 知道自己缺少什么

* 强迫自己做一些自己不喜欢做的事情，比如说写文档

* 能够有勇气重写自己所开发的系统，但当你重做时你应该采取和前一次不同的工作方式和方法，否则重做就没有必要


* 将问题简单化而不是复杂化 

* 将维护时会产生的一部分问题转移到开发时或是设计时来解决 

* 有时候也不妨问问自己：我不做开发时去做什么 

* 坚持为自己做每周的开发计划，在事情没有做完以前不要轻易转移自己的注意力 

* 尽可能多的将你所做的教给别人，因为你有一天可能不再负责这个系统

* 做事一定要有始有终，除非是有不得已的理由否则不要在工作完成前提前离开 

* 不要将你为公司做的东西带走，你因该带走的是开发经验和对开发的认识而不是代码和产品 

* 感到累时就休息一下，给自己放个假也无妨，毕竟人不是机器

　程序员基本素质：

　　作一个真正合格的程序员，或者说就是可以真正合格完成一些代码工作的程序员，应该具 有的素质。

　　1：团队精神和协作能力

　　   把它作为基本素质，并不是不重要，恰恰相反，这是程序员应该具备的最基本的，也是最 重要的安身立命之本。把高水平程序员说成独行侠的都是在呓语，任何个人的力量都是有 限的，即便

       如linus这样的天才，也需要通过组成强大的团队来创造奇迹，那些遍布全球的为linux写核心的高手们，没有协作精神是不可想象的。独行侠可以作一些赚钱的小软 件发点小财，但是一旦进入

      一些大系统的研发团队，进入商业化和产品化的开发任务，缺 乏这种素质的人就完全不合格了。

　　2：文档习惯

　　   说高水平程序员从来不写文档的肯定是乳臭未干的毛孩子，良好的文档是正规研发流程中 非常重要的环节，作为代码程序员，30％的工作时间写技术文档是很正常的，而作为高级 程序员和系

       统分析员，这个比例还要高很多。

　　   缺乏文档，一个软件系统就缺乏生命力，在未来的查错，升级以及模块的复用时就都会遇 到极大的麻烦。

　　3：规范化，标准化的代码编写习惯

　　   作为一些外国知名软件公司的规矩，代码的变量命名，代码内注释格式，甚至嵌套中行缩 进的长度和函数间的空行数字都有明确规定，良好的编写习惯，不但有助于代码的移植和 纠错，也有

       助于不同技术人员之间的协作。

　　有些coding fans叫嚣高水平程序员写的代码旁人从来看不懂，这种叫嚣只能证明他们自 己压根不配自称程序员。代码具有良好的可读性，是程序员基本的素质需求。

　　再看看整个linux的搭建，没有规范化和标准化的代码习惯，全球的研发协作是绝对不可 想象的。

　　4：需求理解能力

　　    程序员需要理解一个模块的需求，很多小朋友写程序往往只关注一个功能需求，他们把性 能指标全部归结到硬件，操作系统和开发环境上，而忽视了本身代码的性能考虑，有人曾 经放言说

	写一个广告交换程序很简单，这种人从来不知道在百万甚至千万数量级的访问情况下的性能指标是如何实现的，对于这样的程序员，你给他深蓝那套系统，他也做不出太 极链的并访能力。

	性能需求指标中，稳定性，并访支撑能力以及安全性都很重要，作为程 序员需要评估该模块在系统运营中所处的环境，将要受到的负荷压力以及各种潜在的危险和恶意攻击的可能性。就这一

	点，一个成熟的程序员至少需要2到3年的项目研发和跟踪经 验才有可能有心得。

　　5：复用性，模块化思维能力

　　	经常可以听到一些程序员有这样的抱怨，写了几年程序，变成了熟练工，每天都是重复写 一些没有任何新意的代码，这其实是中国软件人才最大浪费的地方，一些重复性工作变成 了熟练程

	序员的主要工作，而这些，其实是完全可以避免的。

　　	复用性设计，模块化思维就是要程序员在完成任何一个功能模块或函数的时候，要多想一 些，不要局限在完成当前任务的简单思路上，想想看该模块是否可以脱离这个系统存在， 是否可以

	通过简单的修改参数的方式在其他系统和应用环境下直接引用，这样就能极大避免重复性的开发工作，如果一个软件研发单位和工作组能够在每一次研发过程中都考虑到 这些问题，那么程

	序员就不会在重复性的工作中耽误太多时间，就会有更多时间和精力投 入到创新的代码工作中去。

　　	一些好的程序模块代码，即便是70年代写成的，拿到现在放到一些系统里面作为功能模块 都能适合的很好，而现在我看到的是，很多小公司软件一升级或改进就动辄全部代码重 写，大部分

	重复性工作无谓的浪费了时间和精力。

　　程序员应具备的素质中

　　6：测试习惯

　　	作为一些商业化正规化的开发而言，专职的测试工程师是不可少的，但是并不是说有了专 职的测试工程师程序员就可以不进行自测；软件研发作为一项工程而言，一个很重要的特 点就是问

	题发现的越早，解决的代价就越低，程序员在每段代码，每个子模块完成后进行认真的测试，就可以尽量将一些潜在的问题最早的发现和解决，这样对整体系统建设的效 率和可靠性就有了最

	大的保证。

　　	测试工作实际上需要考虑两方面，一方面是正常调用的测试，也就是看程序是否能在正常 调用下完成基本功能，这是最基本的测试职责，可惜在很多公司这成了唯一的测试任务， 实际上还差

	的远那；第二方面就是异常调用的测试，比如高压力负荷下的稳定性测试，用户潜在的异常输入情况下的测试，整体系统局部故障情况下该模块受影响状况的测试，频 发的异常请求阻塞资源

	时的模块稳定测试等等。当然并不是程序员要对自己的每段代码都 需要进行这种完整测试，但是程序员必须清醒认识自己的代码任务在整体项目中的地位和各种性能需求，有针对性的进行相

	关测试并尽早发现和解决问题，当然这需要上面提到的 需求理解能力。

　　7：学习和总结的能力

　　程序员是人才很容易被淘汰，很容易落伍的职业，因为一种技术可能仅仅在三两年内具有 领先性，程序员如果想安身立命，就必须不断跟进新的技术，学习新的技能。

　　善于学习，对于任何职业而言，都是前进所必需的动力，对于程序员，这种要求就更加高 了。

　　但是学习也要找对目标，一些小coding fans们，他们也津津乐道于他们的学习能力，一 会学会了asp，一会儿学会了php，一会儿学会了jsp，他们把这个作为炫耀的资本，盲目 的追逐一些肤浅的，

    表面的东西和名词，做网络程序不懂通讯传输协议，做应用程序不懂中断向量处理，这样的技术人员，不管掌握了多少所谓的新语言，永远不会有质的提 高。

　　善于总结，也是学习能力的一种体现，每次完成一个研发任务，完成一段代码，都应当有 目的的跟踪该程序的应用状况和用户反馈，随时总结，找到自己的不足，这样逐步提高， 一个程序员才可

    能成长起来。

　　具备以上全部素质的人，应当说是够格的程序员了，请注意以上的各种素质都不是由IQ决 定的，也不是大学某些课本里可以学习到的，需要的仅仅是程序员对自己工作的认识，是 一种意识上的问

    题。
////////////////////////////////////
1. 扎实的基础。数据结构、离散数学、编译原理，这些是所有计算机科学的基础，如果不掌握他们，很难写出高水平的程序。据我的观察，学计算机专业的人比学其他专业的人更能写出高质量的软件。

程序人人都会写，但当你发现写到一定程度很难再提高的时候，就应该想想是不是要回过头来学学这些最基本的理论。不要一开始就去学OOP，即使你再精通OOP，遇到一些基本算法的时候可能也会束手

无策。

2. 丰富的想象力。不要拘泥于固定的思维方式，遇到问题的时候要多想几种解决问题的方案，试试别人从没想过的方法。丰富的想象力是建立在丰富的知识的基础上，除计算机以外，多涉猎其他的学

科，比如天文、物理、数学等等。另外，多看科幻电影也是一个很好的途径。

3. 最简单的是最好的。这也许是所有科学都遵循的一条准则，如此复杂的质能互换原理在爱因斯坦眼里不过是一个简单得不能再简单的公式：E = MC2。简单的方法更容易被人理解，更容易实现，也更

容易维护。遇到问题时要优先考虑最简单的方案，只有简单方案不能满足要求时再考虑复杂的方案。

4. 不钻牛角尖。当你遇到障碍的时候，不妨暂时远离电脑，看看窗外的风景，听听轻音乐，和朋友聊聊天。当我遇到难题的时候会去玩游戏，而且是那种极暴力的打斗类游戏，当负责游戏的那部分大脑

细胞极度亢奋的时候，负责编程的那部分大脑细胞就得到了充分的休息。当重新开始工作的时候，我会发现那些难题现在竟然可以迎刃而解。

5. 对答案的渴求。人类自然科学的发展史就是一个渴求得到答案的过程，即使只能知道答案的一小部分也值得我们去付出。只要你坚定信念，一定要找到问题的答案，你才会付出精力去探索，即使最后

没有得到答案，在过程中你也会学到很多东西。

6. 多与别人交流。三人行必有我师，也许在一次和别人不经意的谈话中，就可以迸出灵感的火花。多上上网，看看别人对同一问题的看法，会给你很大的启发。

7. 良好的编程风格。注意养成良好的习惯，代码的缩进编排，变量的命名规则要始终保持一致。大家都知道如何排除代码中错误，却往往忽视了对注释的排错。注释是程序的一个重要组成部分，它可以

使你的代码更容易理解，而如果代码已经清楚地表达了你的思想，就不必再加注释了，如果注释和代码不一致，那就更加糟糕。

8. 韧性和毅力。这也许是“高手”和一般程序员最大的区别。A good programming is 99% sweat and 1% coffee。高手们并不是天才，他们是在无数个日日夜夜中磨练出来的。成功能给我们带来无比

的喜悦，但过程却是无比的枯燥乏味。你不妨做个测试，找个10000以内的素数表，把它们全都抄下来，然后再检查三遍，如果能够不间断地完成这一工作，你就可以满足这一条。
